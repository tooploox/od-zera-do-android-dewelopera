// MainActivity.java

    Bitmap currentlyDisplayedBitmap = null;

// BitmapUtil.java: create new class called BitmapUtil

import android.graphics.BitmapFactory;

public class BitmapUtil {
    public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

        if (height > reqHeight || width > reqWidth) {
            // Calculate ratios of height and width to requested height and width
            final int heightRatio = Math.round((float) height / (float) reqHeight);
            final int widthRatio = Math.round((float) width / (float) reqWidth);

            // Choose the smallest ratio as inSampleSize value, this will guarantee
            // a final image with both dimensions larger than or equal to the
            // requested height and width.
            inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
        }
        return inSampleSize;
    }
}

// MainActivity.java

   private class LoadBitmapTask extends AsyncTask<Uri, Void, Bitmap> {

        @Override
        protected Bitmap doInBackground(Uri... params) {
            Uri uri = params[0];

            if (uri == null) {
                return null;
            }

            InputStream inStream = null;

            // NOTE: First check the size, then scale and load the image.
            //       See: http://developer.android.com/training/displaying-bitmaps/load-bitmap.html

            try {
                ContentResolver cr = getContentResolver();
                inStream = cr.openInputStream(uri);

                // NOTE: This will cause a crash on large pictures (Out of Memory)
                //bitmap = BitmapFactory.decodeStream(inStream);

                // If the bitmap was already used, recycle it to release memory
                if (currentlyDisplayedBitmap != null) {
                    currentlyDisplayedBitmap.recycle();
                }

                // First check the size of the image
                BitmapFactory.Options checkOptions = new BitmapFactory.Options();
                checkOptions.inJustDecodeBounds = true;

                // Options now contain the size of the image
                BitmapFactory.decodeStream(inStream, null, checkOptions);

                inStream.close();

                // Calculate optimal sample size for the given dimensions
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inSampleSize = BitmapUtil.calculateInSampleSize(checkOptions, 640, 480);

                // Decode and scale the image
                inStream = cr.openInputStream(uri);

                currentlyDisplayedBitmap = BitmapFactory.decodeStream(inStream, null, options);

                inStream.close();
            } catch (FileNotFoundException e) {
                // TODO Meaningful errors messages
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Same as above
                e.printStackTrace();
            }

            return currentlyDisplayedBitmap;
        }

        @Override
        protected void onPostExecute(Bitmap result) {
            if (result != null) {
                ivPicture.setImageBitmap(result);
            }
        }
    }

// MainActivity.java

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (resultCode == Activity.RESULT_OK) {
            if (requestCode == RC_IMAGE_CAPTURE) {
                LoadBitmapTask task = new LoadBitmapTask();
                Uri uri = Uri.fromFile(new File(currentPicturePath));

                task.execute(uri);
            }
        } else if (resultCode == Activity.RESULT_CANCELED) {
            Toast.makeText(this, "Nie to nie! Foch!", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Auć, wystąpił problem z zewnętrzną aplikacją :/", Toast.LENGTH_SHORT).show();
        }
    }

// DEBUG TIME!
